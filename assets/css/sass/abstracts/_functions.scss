// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
/// 
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}

/**
 * Convertir en rem et em
 */
$base-font-size: 16px!default;

// Il est nécéssaire de retirer l'unité px, sinon le calcul ne peut pas se faire.
// On ne peut pas divisé des rem ou em par des pixels.

// Retirer l'unité 'px'
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
}

// Convertir en rem
@function rem($size, $base-font-size) {
  @return 1rem * $size / strip-unit($base);
}

// Convertir en em
@function em($size, $base-font-size) {
  @return 1em * $size / strip-unit($base);
}